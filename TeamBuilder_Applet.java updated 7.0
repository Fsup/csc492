/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author oravecjp
 */
import java.util.*;
import java.awt.FlowLayout;
import java.math.BigDecimal;
import java.sql.*;
import java.util.ArrayList;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;

public class TeamBuilder_Applet extends javax.swing.JApplet {
    private MyGraphicsJFrame myGraphicsJFrame;
    private final double RADIUS_OF_EARTH = 63781370; // in meters
    private final int TEAM_SIZE = 2;
    private int numTeams = 0;
    private ArrayList<CampusBuilding> campusBuildingList;
    private ArrayList<TeamMember> members;
    private float[][] DistanceArray;
    private float[][] tempDistanceArray;
    private ArrayList<ArrayList<TeamMember>> traversalLists = new ArrayList<ArrayList<TeamMember>>();
    private static final double d2r = (Math.PI / 180);
    ArrayList<TeamMember> traversalList = new ArrayList<TeamMember>();
    ArrayList<ArrayList<TeamMember>> teamGroups = new ArrayList<ArrayList<TeamMember>>();

    private Object makeObj(final String item) {
        return new Object() {
            public String toString() {
                return item;
            }
        };
    }

    public float calculateDistances(float lat1, float lat2, float lon1, float lon2) {

// provided by Stack Overflow
// http://stackoverflow.com/questions/365826/calculate-distance-between-2-gps-coordinates

        double dlong = (lon2 - lon1) * d2r;
        double dlat = (lat2 - lat1) * d2r;
        double a = Math.pow(Math.sin(dlat / 2D), 2D) + Math.cos(lat1 * d2r) * Math.cos(lat2 * d2r)
                * Math.pow(Math.sin(dlong / 2D), 2D);
        double c = 2D * Math.atan2(Math.sqrt(a), Math.sqrt(1D - a));
        double d = RADIUS_OF_EARTH * c;

        return (float) d;

    }

    /**
     * Initializes the applet TeamBuilder_Applet
     */
    @Override
    public void init() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TeamBuilder_Applet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TeamBuilder_Applet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TeamBuilder_Applet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TeamBuilder_Applet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
         /* Create and display the applet */
        try {
            java.awt.EventQueue.invokeAndWait(new Runnable() {
                public void run() {
                    initComponents();
                     myGraphicsJFrame = new MyGraphicsJFrame();
                     myGraphicsJFrame.setVisible(false);
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        try {

            jLabel12.setVisible(false);
            jLabel13.setVisible(false);
            jLabel14.setVisible(false);
            cmbTeam.setVisible(false);
            findMeetBtn.setVisible(false);
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection conn = DriverManager.getConnection("jdbc:sqlserver://platinum.mountunion.edu;user=dotDatASCII;password=ak1zn2jo3cp4#;database=dotDatASCII");
            Statement sta = conn.createStatement();
            String Sql = "select * from CampusBuildings ORDER BY buildingName";
            ResultSet rs = sta.executeQuery(Sql);
            campusBuildingList = new ArrayList<CampusBuilding>();
            members = new ArrayList<TeamMember>();


            while (rs.next()) {
                String buildingName = rs.getString(2);
                float latitude = rs.getFloat(3);
                float longitude = rs.getFloat(4);
                campusBuildingList.add(new CampusBuilding(buildingName, latitude, longitude));
                cmbBuildings.addItem(makeObj(buildingName));
            }
            cmbBuildings.setSelectedIndex(-1); 
            DistanceArray = new float[campusBuildingList.size()][campusBuildingList.size()];

            for (CampusBuilding b : campusBuildingList) {
                for (CampusBuilding c : campusBuildingList) {
                    float temp = calculateDistances(b.getLatitude(), c.getLatitude(), b.getLongitude(), c.getLongitude());
                    DistanceArray[campusBuildingList.indexOf(b)][campusBuildingList.indexOf(c)] = temp;
                }
            }


            rs.close();
            sta.close();

        } catch (Exception e) {
            System.out.println("something bad");
        }

    }

    public void storeTeamMember() {
        String studentName = txtStudentName.getText();
        float lat = 0;
        float lon = 0;
        TeamMember member;

        if (cmbBuildings.getSelectedIndex() != -1 && (txtLocation.getText().equals("") && txtLatitude.getText().equals("") && txtLongitude.getText().equals(""))) {
           
            CampusBuilding building = campusBuildingList.get(cmbBuildings.getSelectedIndex());
            member = new TeamMember(studentName, building);
            if (!members.isEmpty()) {
                for (int i = 0; i < members.size(); i++) {
                    int index1 = campusBuildingList.indexOf(members.get(i).getBuilding());
                    int index2 = cmbBuildings.getSelectedIndex();
                    members.get(i).AddMember(member, DistanceArray[index1][index2]);
                    member.AddMember(members.get(i), DistanceArray[index2][index1]);
                }

                members.add(member);
                for (TeamMember m : members) {
                    m.getOtherMembers();
                }

            } else if (members.isEmpty()) {
                members.add(member);

            }
            
            txtAddedMembers.append("Team Member: " + studentName + "\nBuilding: " + building.getName() + "\n\n");
            switch(building.getName()){
                case("Bica-Ross"):myGraphicsJFrame.paintOnBica(true);break;
                case("HPCC"):myGraphicsJFrame.paintOnHPCC(true);break;
                case("Ketchum"):myGraphicsJFrame.paintOnKetcham(true);break;
                case("Shields"):myGraphicsJFrame.paintOnShields(true);break;
                case("McMaster"):myGraphicsJFrame.paintOnMcMaster(true);break;
                case("New Townhouses"):myGraphicsJFrame.paintOnHartshorn(true);break;
                default: System.out.println("Hit Default Case");
            }
            
            

        } else if (cmbBuildings.getSelectedIndex() == -1 && !(txtLocation.getText().equals("") && txtLatitude.getText().equals("") && txtLongitude.getText().equals(""))) {
            try {
                lat = Float.parseFloat(txtLatitude.getText());
                System.out.println("lat: " + lat);
                lon = Float.parseFloat(txtLongitude.getText());
                System.out.println("lon: " + lon);
                CampusBuilding building = new CampusBuilding(txtLocation.getText(), lat, lon);
                campusBuildingList.add(building);
                tempDistanceArray = new float[campusBuildingList.size()][campusBuildingList.size()];
                tempDistanceArray = DistanceArray;
                System.out.println("copied Distance Array correctly... tempdistance array size :" + tempDistanceArray.length);
                DistanceArray = new float[tempDistanceArray.length + 1][tempDistanceArray.length + 1];
                System.out.println("distancearray.length = " + DistanceArray.length);
                for(int i = 0; i < tempDistanceArray.length; i++)
                {
                    //System.out.println("i = " + i);
                    for(int j = 0; j < tempDistanceArray.length; j++)
                    {                    
                    //System.out.println("j = " + j);
                        DistanceArray[i][j] = tempDistanceArray[i][j];
                    }
                }
                
                member = new TeamMember(studentName, building); 
                if (!members.isEmpty()) {
                    for (TeamMember m : members) {
                        
                        m.AddMember(member, getDistances(member,m));
                        member.AddMember(m, getDistances(m,member));
                    }
                }
                members.add(member);
                System.out.println("member : " + studentName + " : " + building.getName());
                txtAddedMembers.append("Team Member: " + studentName + "\nLocation: " + building.getName() + "\n\n");
            } catch (Exception e) {
                System.out.println("latitude and longitude error");

            }
        } else {
            System.out.println("Indecisive Team Member Add Method");
        }

        cmbBuildings.setSelectedIndex(-1);
        txtLatitude.setText("");
        txtLongitude.setText("");
        txtStudentName.setText("");
        txtLocation.setText("");
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtLocation = new javax.swing.JTextField();
        storeBtn = new javax.swing.JButton();
        generateTeamsBtn = new javax.swing.JButton();
        findMeetBtn = new javax.swing.JButton();
        txtStudentName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cmbBuildings = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtLongitude = new javax.swing.JTextField();
        txtLatitude = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtGroupOutput = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAddedMembers = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        cmbTeam = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        btnShowMap = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(1000, 1000));
        setName("MyJPanel"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1000, 1000));

        storeBtn.setText("Store Team Member");
        storeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeBtnActionPerformed(evt);
            }
        });

        generateTeamsBtn.setText("Generate Teams");
        generateTeamsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateTeamsBtnActionPerformed(evt);
            }
        });

        findMeetBtn.setText("Find Meeting Place");
        findMeetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findMeetBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Student's Name:");

        jLabel2.setText("Location Name:");

        jLabel3.setText("GPS Coordinates:");

        jLabel4.setText("Choose an on-campus Location");

        cmbBuildings.setMaximumRowCount(500);

        jLabel5.setText("Step 1: Insert Student's Name");

        jLabel6.setText("Latitude");

        jLabel7.setText("Longitude");

        jLabel8.setText("Step 2: Choose Location");

        jLabel9.setText("OR input your location");

        txtGroupOutput.setColumns(20);
        txtGroupOutput.setRows(5);
        jScrollPane1.setViewportView(txtGroupOutput);

        txtAddedMembers.setColumns(20);
        txtAddedMembers.setRows(5);
        jScrollPane2.setViewportView(txtAddedMembers);

        jLabel10.setText("Current Team Members");

        jLabel11.setText("Final Groups");

        jLabel12.setText("When teams are generated,");

        jLabel13.setText("you can find a meeting place by selecting a team");

        jLabel14.setText("from the drop-down box and clicking the button.");

        btnShowMap.setText("Show Map");
        btnShowMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowMapActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel4))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(cmbBuildings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel3))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel9))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addGap(2, 2, 2)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtLongitude, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtLatitude, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel14)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel12)
                                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(cmbTeam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(204, 204, 204))
                                            .addComponent(jSeparator1))))
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addGap(0, 334, Short.MAX_VALUE))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel1)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(storeBtn)
                                        .addGap(18, 18, 18)
                                        .addComponent(generateTeamsBtn)
                                        .addGap(18, 18, 18)
                                        .addComponent(findMeetBtn)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnShowMap)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)))
                    .addComponent(jLabel5))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel1))
                    .addComponent(txtStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbBuildings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtLatitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtLongitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel12)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbTeam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 472, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(storeBtn)
                    .addComponent(findMeetBtn)
                    .addComponent(generateTeamsBtn)
                    .addComponent(btnShowMap))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void storeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storeBtnActionPerformed
        storeTeamMember();
    }//GEN-LAST:event_storeBtnActionPerformed

    private void generateTeamsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateTeamsBtnActionPerformed
        numTeams = members.size()/TEAM_SIZE;
        txtGroupOutput.append(createTeams(numTeams));
        jLabel12.setVisible(true);
        jLabel13.setVisible(true);
        jLabel14.setVisible(true);
        cmbTeam.setVisible(true);
        generateTeamsBtn.setVisible(false);
        storeBtn.setVisible(false);
        findMeetBtn.setVisible(true);
    }//GEN-LAST:event_generateTeamsBtnActionPerformed

    private void findMeetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findMeetBtnActionPerformed
        
        txtGroupOutput.append(prepMeetingPlace());
    }//GEN-LAST:event_findMeetBtnActionPerformed

    private void btnShowMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowMapActionPerformed
        // TODO add your handling code here:
        System.out.println("showGraphicsButtonActionPerformed");
        myGraphicsJFrame.setVisible(true);
    }//GEN-LAST:event_btnShowMapActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnShowMap;
    private javax.swing.JComboBox cmbBuildings;
    private javax.swing.JComboBox cmbTeam;
    private javax.swing.JButton findMeetBtn;
    private javax.swing.JButton generateTeamsBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton storeBtn;
    private javax.swing.JTextArea txtAddedMembers;
    private javax.swing.JTextArea txtGroupOutput;
    private javax.swing.JTextField txtLatitude;
    private javax.swing.JTextField txtLocation;
    private javax.swing.JTextField txtLongitude;
    private javax.swing.JTextField txtStudentName;
    // End of variables declaration//GEN-END:variables

    private void printDistanceArray() {

        float temp = 0;

        for (int i = 0; i < DistanceArray.length; i++) {
            for (int j = 0; j < DistanceArray[i].length; j++) {
                temp = DistanceArray[i][j];
                System.out.print("[" + temp + "] ");
            }
            System.out.println("");
        }

    }

    private String createTeams(int totalTeams) {

        TeamMember closestNeighbor = new TeamMember();
        TeamMember memberToTest = new TeamMember();
        float distanceToTest;
        ArrayList<Float> computedPaths = new ArrayList<Float>();
        ArrayList<ArrayList<TeamMember>> finalGrouping = new ArrayList<ArrayList<TeamMember>>();
        ArrayList<TeamMember> finalTeams = new ArrayList<TeamMember>();
        
        for (int i = 0; i < members.size(); i++) {
            System.out.println("Iteration: " + i);
            float shortestDistance = (float) RADIUS_OF_EARTH;

            for (TeamMember m : members) {
                m.setHasBeenVisited(false);
            }
            traversalList = new ArrayList<TeamMember>();
            TeamMember currentMember = members.get(i);
            currentMember.setHasBeenVisited(true);
            traversalList.add(currentMember);
            while (traversalList.size() < members.size()) {
                for (int j = 0; j < members.size(); j++) {
                    System.out.println("Iteration j:" + j + " of " + members.size());
                    memberToTest = members.get(j);
                    System.out.println("Selecting " + memberToTest.getName() + " to test");
                    distanceToTest = getDistanceTo(memberToTest.getBuilding(), members.get(j).getBuilding());
                    System.out.println(memberToTest.getName() + " has been visited?: " + memberToTest.hasBeenVisited()); 
                    if (distanceToTest < shortestDistance && !memberToTest.hasBeenVisited()) {
                        System.out.println("New shortest distance found!");
                        shortestDistance = distanceToTest;
                        closestNeighbor = memberToTest;
                    }
                    System.out.println("shortest Distance: " + shortestDistance + " to " + closestNeighbor.getName());
                }
                System.out.println("Executing move to: " + closestNeighbor.getName());
                currentMember = closestNeighbor;
                System.out.println("currentMember: " + currentMember.getName());
                currentMember.setHasBeenVisited(true);
                shortestDistance = (float) RADIUS_OF_EARTH;
                traversalList.add(currentMember);


                System.out.println("traversalList: ");
                for (TeamMember b : traversalList) {
                    System.out.print(b.getName() + " -> ");
                }
                  System.out.println("");
            }
            traversalLists.add(traversalList);
        }
        
         System.out.println("List of Traversals: " + traversalLists.size());
        for (int i = 0; i < traversalLists.size(); i++) {            
            ArrayList<TeamMember> temp = new ArrayList<TeamMember>();
            temp = (ArrayList<TeamMember>)traversalLists.get(i);
            System.out.println("temp size" + temp.size());
            for (int j = 0; j < temp.size(); j++) {
                System.out.print(temp.get(j).getName() + " -> ");
            }
            System.out.println(" Cumulative Distance: " + getTraversalDistance(traversalLists.get(i)));
            
            /*new code*/
            computedPaths.add(getTraversalDistance(traversalLists.get(i)));
        }
        
        float shortestPath = computedShortestPath(computedPaths);
        System.out.println("shortest Path: " + shortestPath);
        
        for(int i = 0; i < computedPaths.size(); i++)
        {
            if(computedPaths.get(i) == shortestPath)
            {
                finalGrouping.add(traversalLists.get(i));
            }
        }
        
        String output = "Final Teams:\n\n";
        
        output += makeTeamGroupings(finalGrouping, totalTeams);
        
        return output;

    }

    public float getTraversalDistance(ArrayList<TeamMember> al){
        float sum = 0;
        for(int i=0; i < al.size() ;i++){
            if(i == al.size() - 1){
                System.out.println("do nothing");
            }
            else{
                sum += getDistanceTo(al.get(i).getBuilding(),al.get(i + 1).getBuilding());
            }
        }
        return sum;
    }
    
    public float getDistanceTo(CampusBuilding a, CampusBuilding b) {
        int start = campusBuildingList.indexOf(a);
        int end = campusBuildingList.indexOf(b);
        return DistanceArray[start][end];
    }
    
    public float getDistances(TeamMember a, TeamMember b) {
        return calculateDistances(a.getBuilding().getLatitude(), b.getBuilding().getLatitude(), a.getBuilding().getLongitude(), b.getBuilding().getLongitude());
    }
    
    public float computedShortestPath(ArrayList<Float> list)
    {
        float shortestPath = list.get(0);        
        for(int i = 1; i < list.size(); i++)
        {
            if(list.get(i) < shortestPath)
            {
                shortestPath = list.get(i);
            }
        }        
        return shortestPath;
    }
    
    public String makeTeamGroupings(ArrayList<ArrayList<TeamMember>> group, int numberOfTeams)
    {   
        int count = 0;

        String teams = "";
        
        for(int i = 0; i < numberOfTeams; i++)
        {    
            ArrayList<TeamMember> temp = new ArrayList<TeamMember>();
            String str = "Team " + (i+1);
            teams += "Team " + (i+1) + "\n";
            
            for(int j = 0; j < TEAM_SIZE; j++)
            {
                teams += "   " + group.get(0).get(count).getName() + "\n";
                temp.add(group.get(0).get(count));
                count++;
            }
            
            teamGroups.add(temp);
            cmbTeam.addItem(makeObj(str));
            teams += "\n";
           
        }       
        cmbTeam.setSelectedIndex(-1);
        return teams;
    }
    
    public String prepMeetingPlace()
    {
        String output = "";
        try{            
            int index = cmbTeam.getSelectedIndex();
            output = findMidpoint(teamGroups.get(index));            
        }
        catch(Exception e)
        {
            System.out.println("No team selected");
        }
        return output;
    }
    
    public String findMidpoint(ArrayList<TeamMember> selectedTeam) {

        String output = "";
        
        float totalLat = 0;
        float totalLon = 0;
        
        for(int i = 0; i < 2; i++)
        {
            totalLat += selectedTeam.get(i).getBuilding().getLatitude();
            totalLon += selectedTeam.get(i).getBuilding().getLongitude();
        }
        
        float avgLatitude = totalLat/TEAM_SIZE;
        float avgLongitude = totalLon/TEAM_SIZE;
        
        output = "Meeting Place for " + cmbTeam.getSelectedItem().toString() +  ":\nLatitude: " + avgLatitude + "N\nLongitude: " + avgLongitude + "W\n\n";
        
        return output;
    }
}
